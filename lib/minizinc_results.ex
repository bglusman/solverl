defmodule MinizincResults do
  @moduledoc """
    Functions and data structures for working with data produced by Minizinc during runtime.
  """

  require Logger


  ############### Solver results ##################
  def get_last_solution(solver_results) do
    solver_results[:summary][:last_solution]
  end

  def get_solution_count(solver_results) do
    solver_results[:summary][:solution_count]
  end

  def has_solution(solver_results) do
    get_solution_count(solver_results) > 0
  end

  def get_solution_objective(solution) do
    get_solution_value(solution, "_objective")
  end

  ## Get output generated by a solver for the given solution
  ## (through 'output' model clauses).
  def get_solution_output(solution) do
    get_solution_value(solution, "_output")
  end

  ## Get value of the variable from the solution
  def get_solution_value(solution, varname) do
    solution[:data][varname]
  end

  def get_solution_index(solution) do
    solution[:index]
  end

  def get_solutions(solver_results) do
    solver_results[:solutions]
  end

  def get_status(solver_results) do
    status(MinizincResults.get_method(solver_results), solver_results[:summary][:status])
  end

  def get_method(solver_results) do
    MinizincModel.method(solver_results[:summary][:model_info])
  end

  def status(:satisfy, :all_solutions) do
    :all_solutions
  end

  def status(method, :all_solutions) when method in [:minimize, :maximize] do
    :optimal
  end

  def status(_method, status) do
    status
  end

end
